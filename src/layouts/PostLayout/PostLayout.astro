---
import "@/styles/katex.css"
import { Icon, type IconName } from "@/components/Elements/Icon"
import { CategoryCard } from "@/components/Elements/PostCard/CategoryCard"
import { TagCard } from "@/components/Elements/PostCard/TagCard"
import { BaseLayout, type BaseLayoutProps } from "@/layouts/BaseLayout"
import { formatDate } from "@/lib/date"
import { calculateReadingTime } from "@/lib/posts"
import type { CollectionEntry } from "astro:content"
import { mdxComponents } from "@/lib/mdx"
import * as path from "node:path"

export type Props = Partial<BaseLayoutProps> & {
  post: CollectionEntry<"posts">
}
const { post, ...props } = Astro.props

const { Content, headings } = await post.render()

const date = formatDate(post.data.date)
const lastmod = post.data.lastmod ? formatDate(post.data.lastmod) : undefined
const readingTime = calculateReadingTime(post.body)
const categories = post.data.categories
const tags = post.data.tags || []

const postUrl = new URL(path.join("posts", post.slug), Astro.site)
const ogImageUrl = new URL(path.join("posts", `${post.slug}.png`), Astro.site)
---

<BaseLayout
  title={post.data.title}
  og={{
    type: "article",
    url: postUrl,
    image: ogImageUrl,
    ...props.og,
  }}
  twitter={{
    card: "summary_large_image",
    image: ogImageUrl,
    title: post.data.title,
  }}
  {...props}
>
  <main class="my-12 flex flex-1">
    <article class="mx-auto max-w-screen-md">
      <header class="flex flex-col items-center gap-6">
        <Icon
          name={post.data.icon as IconName}
          class="size-44 rounded-full bg-bg-default p-8 shadow-md"
          pagefindImage
        />
        <h1 class="text-3xl font-bold" data-pagefind-meta="title">{post.data.title}</h1>
        <div class="flex flex-wrap">
          {categories.map((category) => <CategoryCard id={category.id} />)}
          {tags.map((tag) => <TagCard id={tag} />)}
        </div>
        <div class="flex w-full max-w-lg flex-row flex-wrap justify-between text-center">
          <div class="mx-auto my-2">
            <div class="font-bold">投稿</div>
            <div>
              {date}
            </div>
          </div>
          {
            lastmod && post.data.date.getTime() !== post.data.lastmod?.getTime() && (
              <div class="mx-auto my-2">
                <div class="font-bold">最終更新</div>
                <div>{lastmod}</div>
              </div>
            )
          }
          <div class="mx-auto my-2">
            <div class="font-bold">読了時間</div>
            <div>約 {readingTime} 分</div>
          </div>
        </div>
      </header>
      <section class="prose mt-16 max-w-full dark:prose-invert">
        <Content components={mdxComponents} />
      </section>
    </article>
    <aside class="relative mx-4 hidden w-[224px] xl:block">
      <div class="sticky top-[100px]">
        <div class="mb-4 text-xl font-bold">目次</div>
        <ul class="relative border-s border-border-muted">
          {
            headings
              .filter((heading) => heading.depth === 2 || heading.depth === 3)
              .map((heading) => (
                <li class="mb-2 ms-4">
                  <div
                    class={`absolute ${
                      heading.depth === 2 ? "-start-1.5 mt-1.5 size-3" : "-start-1 mt-2 size-2"
                    } rounded-full border border-border-muted bg-border-muted`}
                  />
                  <a href={`#${heading.slug}`} class="block max-w-[200px] truncate">
                    <span class={`text-mauve-11 ${heading.depth === 2 ? "font-bold" : "font-normal"}`}>
                      {heading.text}
                    </span>
                  </a>
                </li>
              ))
          }
        </ul>
      </div>
    </aside>
  </main>
</BaseLayout>
